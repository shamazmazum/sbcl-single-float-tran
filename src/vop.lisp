(in-package :sb-vm)

(define-vop (fsqrtf)
  (:args (x :scs (single-reg)))
  (:results (y :scs (single-reg)))
  (:translate sbcl-single-float-tran::%sqrtf)
  (:policy :fast-safe)
  (:arg-types single-float)
  (:result-types single-float)
  (:note "inline float arithmetic")
  (:vop-var vop)
  (:save-p :compute-only)
  (:generator
   1
   (unless (location= x y)
     (inst xorps y y))
   (note-float-location 'sqrt vop x)
   (inst sqrtss y x)))

(macrolet ((frob (op-name vop-name op-inst double-p)
             (let ((sc-name    (if double-p 'double-reg 'single-reg))
                   (move-inst  (if double-p 'movsd 'movss))
                   (immediate  (if double-p 'fp-double-immediate 'fp-single-immediate))
                   (parent-vop (if double-p 'double-float-op 'single-float-op)))
               `(define-vop (,vop-name ,parent-vop)
                  (:translate ,op-name)
                  (:temporary (:sc ,sc-name) tmp)
                  (:vop-var vop)
                  (:generator
                   2
                   (flet ((get-constant (tn)
                            (let ((value (tn-value tn)))
                              (register-inline-constant value))))
                     (cond
                       ((location= x r)
                        (note-float-location ',op-name vop x y)
                        (when (sc-is y ,immediate)
                          (setf y (get-constant y)))
                        (inst ,op-inst x y))
                       ((not (location= r y))
                        (if (sc-is x ,immediate)
                            (inst ,move-inst r (get-constant x))
                            (move r x))
                        (note-float-location ',op-name vop r y)
                        (when (sc-is y ,immediate)
                          (setf y (get-constant y)))
                        (inst ,op-inst r y))
                       (t
                        (if (sc-is x ,immediate)
                            (inst ,move-inst tmp (get-constant x))
                            (move tmp x))
                        (note-float-location ',op-name vop tmp y)
                        (inst ,op-inst tmp y)
                        (move r tmp)))))))))
  (frob sbcl-single-float-tran::%minf fminf minss nil)
  (frob sbcl-single-float-tran::%mind fmind minsd t)
  (frob sbcl-single-float-tran::%maxf fmaxf maxss nil)
  (frob sbcl-single-float-tran::%maxd fmaxd maxsd t))
